kubernetes:
  # apiUrl can be a service (if running against the local cluster) or the URL
  # of a remote cluster API. The script will log into this API with the token
  # of the service account that's running the script. Make sure that the
  # service account has "list" verb for "namespace" cluster resources.
  apiUrl: https://kubernetes.svc

  # Set token if running outside of the cluster. If token is not set, the
  # token for the service account running the job will be used.
  # token: ""

  # Create a ClusterRole for "list" on "namespaces" and bind to the "default"
  # service account under the "vault-server" namespace.
  createRole: true

vault:
  # Vault API token that has permissions to create roles under the given auth
  # engine.
  token: ""

  # Vault Auth engine name to create roles under
  authEngineName: dev

  # Vault policy to attach to roles
  policyName: dev

# Leave this section alone unless you need to customize the script
cronJob:
  image: registry.redhat.io/openshift4/ose-cli:v4.10
  name: vault-role-namespace-sync
  schedule: "*/1 * * * *"
  script: |
    #!/bin/bash
    AUTH_ENGINE_NAME="{{ .Values.vault.authEngineName }}"
    POLICY_NAME="{{ .Values.vault.policyName }}"
    NAMESPACES=$(oc get namespaces -o name)
    for NAMESPACE in $NAMESPACES ; do
        echo "Processing $NAMESPACE..."
        echo vault write \
            "auth/$AUTH_ENGINE_NAME/role/$NAMESPACE" \
            bound_service_account_names="default" \
            bound_service_account_namespaces="$NAMESPACE" \
            policies="$POLICY_NAME" \
            ttl=60m
    done
